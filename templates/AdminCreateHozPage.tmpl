{{ define "AdminCreateHozPage.tmpl" }}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.title}}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            
        }
        
        h1 {
            text-align: center;
            color: #6f42c1;
            margin-bottom: 20px;
        }

        .back-button {
            position: absolute;
            top: 20px;
            left: 20px;
            background-color: #e0c6f2; /* Светлый оттенок фиолетового */
            color: #FFF;
            border: none;
            padding: 8px 12px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
            background-color: #6f42c1;

            position: absolute;
            height: 100vh;
            top: 0;
            left: 0;
        }

        .back-button:hover {
            background-color: #5a32a3; /* Темнее фиолетового при наведении */
        }

        .form-container {
            background-color: #ffffff; /* Белый фон для формы */
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            text-align: center; /* Центрирование текста внутри блока */
            min-width: 300px; /* Минимальная ширина контейнера */
            max-width: 400px;
            margin: 10px;
        }

        label {
            display: block; /* Блоки для меток */
            margin: 10px 0 5px;
            text-align: left; /* Выравнивание текста в левой части */
        }

        input[type="text"],
        input[type="email"],
        input[type="tel"],
        input[type="password"],
        input[type="number"],
        textarea,
        select {
            width: 100%; /* Ширина полей ввода и селекта */
            padding: 10px;
            margin-bottom: 5px;
            border: 1px solid #ccc; /* Цвет рамки */
            border-radius: 5px; /* Скругление углов */
            box-sizing: border-box; /* Учет границ и отступов в ширине */
            -webkit-appearance: none; /* Убираем стандартный стиль селекта в WebKit-браузерах */
            -moz-appearance: none; /* Убираем стандартный стиль селекта в Firefox */
            appearance: none; /* Убираем стандартный стиль селекта для всех других браузеров */
            background-color: #ffffff; /* Фон выпадающего списка */
            background-repeat: no-repeat;
            background-position: right 10px center; /* Позиция стрелки */
            background-size: 12px; /* Размер стрелки */
        }

        /* Скрытие кнопок для ввода чисел */
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button {
            -webkit-appearance: none; /* Скрыть кнопки для WebKit-браузеров */
            margin: 0; /* Удалить отступы */
        }

        input[type=number] {
            -moz-appearance: textfield; /* Скрыть кнопки для Firefox */
        }

        .submit-button {
            background-color: #6f42c1; /* Светло-фиолетовый цвет кнопки */
            color: #ffffff; /* Белый текст на кнопке */
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s; /* Плавное изменение цвета */
            width: 100%; /* Кнопка занимает всю ширину */
        }

        .submit-button:hover {
            background-color: #5a32a1; /* Темнее при наведении */
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: lightgreen;
            color: black;
            padding: 15px;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            z-index: 1000;
        }

    </style>
</head>
<body>
    <h1>Создать хозяйство</h1>
    <button class="back-button" onclick="window.location.href='/api/admin/checkHozs'">
        <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-left"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M15 6l-6 6l6 6" /></svg>
    </button>    <div class="form-container">
    <form id="userForm" onsubmit="sendData(); return false;">
        <input type="text" id="hoz_number" name="hoz_number" placeholder="Номер хозяйства" required>

        <select id="region" name="region" onchange="fetchDistricts(this.value)">
            <option value="" selected disable hidden >Регион</option>
            {{ range .regions }}
                <option value="{{ .ID }}">{{ .Name }}</option>
            {{ end }}
        </select>


        <select id="district" name="district"required>
            <option value="" selected disable hidden>Район</option>
            {{ range .districts }}
                <option value="{{ .ID }}">{{ .Name }}</option>
            {{ end }}
        </select>

        <select id="hold" name="hold" required>
            <option value="" selected disable hidden>Холдинг</option>
            {{ range .holds }}
                <option value="{{ .ID }}">{{ .Name }}</option>
            {{ end }}
        </select>

        <input type="text" id="fullname" name="fullname" placeholder="Полное название" required>

        <input type="text" id="name" name="name" placeholder="Сокращенное название" required>

        <input type="text" id="inn" name="inn" placeholder="ИНН"  required>

        <textarea id="address" name="address" rows="2" placeholder="Адрес" required></textarea>

        <input type="tel" id="phone" name="phone" placeholder="Телефон" required>

        <input type="email" id="email" name="email" placeholder="Email" required>

        <textarea id="description" name="description" rows="4" placeholder="Описание"></textarea>

        <button class="submit-button" type="submit">Создать хозяйство</button>
    </form>
        <div id="notification" class="notification" style="display:none;">Подтверждено</div>
    </div>
</body>
<script>
    let showNotification = false;
    window.onload = function() {
        const notification = document.getElementById('notification');
        
        // Проверяем, нужно ли показывать уведомление
        if (localStorage.getItem('showNotification') === 'true') {
            notification.style.display = 'block';

            // Удаляем уведомление через 1,5 секунды
            setTimeout(() => {
                notification.style.display = 'none';
                localStorage.removeItem('showNotification');
            }, 1500);
        }
    };
    // Функция для отправки данных на сервер
    function sendData() {
        const data = {
            hoznumber: document.getElementById('hoz_number').value,
            district: document.getElementById('district').value,
            parentid: document.getElementById('hold').value,
            fullname: document.getElementById('fullname').value,
            name: document.getElementById('name').value,
            inn: document.getElementById('inn').value,
            address: document.getElementById('address').value,
            phone: document.getElementById('phone').value,
            email: document.getElementById('email').value,
            description: document.getElementById('description').value,
        };
        console.log(data)
        fetch('/api/admin/newHoz', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        })
        .then(response => {
            if (!response.ok) {
                console.error('Ошибка сервера:', response.status);
                throw new Error('Сетевое соединение не установлено');
            }
            return response.json();
        })
        .then(data => {
            console.log('Успех:', data);
        })
        .catch((error) => {
            console.error('Ошибка:', error);
        });

        localStorage.setItem('showNotification', 'true');
        setTimeout(function() {
            location.reload();
        }, 100);
    }

    function fetchDistricts(regionId) {
        // Очистка списка хозяйств
        const distSelect = document.getElementById('district');
        distSelect.innerHTML = '<option value="" selected disable hidden>Район</option>'; // сброс

        if (regionId) {
            // Отправка запроса на сервер
            fetch(`/api/districts`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Сеть не отвечает');
                    }
                    return response.json();
                })
                .then(data => {
                    let hasDist = false;
                    // Добавление новых опций в селект
                    data.forEach(district => {
                        if (district.RegionId == regionId) { // Пример условия фильтрации
                            const option = document.createElement('option');
                            option.value = district.ID; // Используем ID фермы в качестве значения
                            option.textContent = district.Name; // Название фермы
                            distSelect.appendChild(option);
                            hasDist = true;
                        }
                    });
                    if(!hasDist) {
                        const option = document.createElement('option');
                        option.value = "";
                        option.textContent = "Нет районов в регионе";
                        option.disabled = true;
                        option.selected = true;
                        distSelect.appendChild(option);
                    }
                     
                })
                .catch(error => {
                    console.error('Ошибка:', error);
                });
            }
    }
</script>  
</html>
{{ end }}