{{ define "AdminUpdateHoldingPage.tmpl" }}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.title}}</title>
    <style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4; /* Светлый фон */
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100vh; /* Высота на весь экран */
    }

    h1 {
        text-align: center;
        color: #6f42c1; /* Светло-фиолетовый цвет */
        margin-bottom: 20px;
    }

    .back-button {
        position: absolute;
        top: 20px;
        left: 20px;
        background-color: #e0c6f2; /* Светлый оттенок фиолетового */
        color: #FFF;
        border: none;
        padding: 8px 12px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s ease;
        background-color: #6f42c1;

        position: absolute;
        height: 100vh;
        top: 0;
        left: 0;
    }

    .back-button:hover {
        background-color: #5a32a3; /* Темнее фиолетового при наведении */
    }

    .form-container {
        background-color: #ffffff; /* Белый фон для формы */
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        text-align: center; /* Центрирование текста внутри блока */
        max-width: 400px; /* Минимальная ширина контейнера */
        margin: 10px;
    }

    label {
        display: block; /* Блоки для меток */
        margin: 10px 0 5px;
        text-align: left; /* Выравнивание текста в левой части */
    }

    input[type="text"],
    input[type="email"],
    input[type="tel"],
    input[type="password"],
    input[type="number"],
    textarea,
    select {
        width: 100%; /* Ширина полей ввода и селекта */
        padding: 10px;
        margin-bottom: 5px;
        border: 1px solid #ccc; /* Цвет рамки */
        border-radius: 5px; /* Скругление углов */
        box-sizing: border-box; /* Учет границ и отступов в ширине */
        -webkit-appearance: none; /* Убираем стандартный стиль селекта в WebKit-браузерах */
        -moz-appearance: none; /* Убираем стандартный стиль селекта в Firefox */
        appearance: none; /* Убираем стандартный стиль селекта для всех других браузеров */
        background-color: #ffffff; /* Фон выпадающего списка */
        background-repeat: no-repeat;
        background-position: right 10px center; /* Позиция стрелки */
        background-size: 12px; /* Размер стрелки */
    }

    /* Скрытие кнопок для ввода чисел */
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none; /* Скрыть кнопки для WebKit-браузеров */
        margin: 0; /* Удалить отступы */
    }

    input[type=number] {
        -moz-appearance: textfield; /* Скрыть кнопки для Firefox */
    }

    .submit-button {
        background-color: #6f42c1; /* Светло-фиолетовый цвет кнопки */
        color: #ffffff; /* Белый текст на кнопке */
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s; /* Плавное изменение цвета */
        width: 100%; /* Кнопка занимает всю ширину */
    }

    .submit-button:hover {
        background-color: #5a32a1; /* Темнее при наведении */
    }

    .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: lightgreen;
            color: black;
            padding: 15px;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            z-index: 1000;
        }
</style>
        
</head>
<body>
    <h1>Редактировать холдинг</h1>
    <button class="back-button" onclick="window.location.href='/api/admin/checkHoldings'">
        <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-left"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M15 6l-6 6l6 6" /></svg>
    </button>
    <div class="form-container">
        <input type="text" id="holding_number" name="holding_number" placeholder="{{if .farm.HozNumber}}{{.farm.HozNumber}}{{else}}Номер холдинга{{end}}" required>

        <select id="region" name="region" onchange="fetchDistricts(this.value)">
            <option value="{{.farm.District.RegionId}}" selected disable hidden >{{if .farm.District.Region.Name}}{{.farm.District.Region.Name}}{{else}}Регион{{end}}</option>
            {{ range .regions }}
                <option value="{{ .ID }}">{{ .Name }}</option>
            {{ end }}
        </select>

        <select id="district" name="district" required>
            <option value="{{.farm.DistrictId}}" selected disable hidden>{{if .farm.District.Name}}{{.farm.District.Name}}{{else}}Район{{end}}</option>
            {{ range .districts }}
                <option value="{{ .ID }}">{{ .Name }}</option>
            {{ end }}
        </select>
        
        <input type="text" id="fullname" name="fullname" placeholder="{{if .farm.Name}}{{.farm.Name}}{{else}}Полное название{{end}}" required>

        <input type="text" id="name" name="name" placeholder="{{if .farm.NameShort}}{{.farm.NameShort}}{{else}}Название{{end}}" required>

        <input type="text" id="inn" name="inn" placeholder="{{if .farm.Inn}}{{.farm.Inn}}{{else}}ИНН{{end}}" required>

        <textarea id="address" name="address" rows="2" placeholder="{{if .farm.Address}}{{.farm.Address}}{{else}}Адрес{{end}}" required></textarea>

        <input type="tel" id="phone" name="phone" placeholder="{{if .farm.Phone}}{{.farm.Phone}}{{else}}Телефон{{end}}" required>

        <input type="email" id="email" name="email" placeholder="{{if .farm.Email}}{{.farm.Email}}{{else}}Email{{end}}" required>

        <textarea id="description" name="description" rows="3" placeholder="{{if .farm.Description}}{{.farm.Description}}{{else}}Описание{{end}}" required></textarea>

        <button class="submit-button" type="submit" onclick="sendData()">Подтвердить</button>
        <div id="notification" class="notification" style="display:none;">Подтверждено</div>
    </div>
    
</body>

<script>
    window.onload = function() {
        const notification = document.getElementById('notification');
        
        // Проверяем, нужно ли показывать уведомление
        if (localStorage.getItem('showNotification') === 'true') {
            notification.style.display = 'block';

            setTimeout(() => {
                notification.style.display = 'none';
                localStorage.removeItem('showNotification');
            }, 1500);
        }
    };

    // Функция для отправки данных на сервер
    function sendData() {
        const data = {
            holding_number: document.getElementById('holding_number').value,
            district: document.getElementById('district').value,
            fullname: document.getElementById('fullname').value,
            name: document.getElementById('name').value,
            inn: document.getElementById('inn').value,
            address: document.getElementById('address').value,
            phone: document.getElementById('phone').value,
            email: document.getElementById('email').value,
            description: document.getElementById('description').value,
        };
        console.log(data)
        fetch('/api/admin/updateFarm/{{.farm.ID}}', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        })
        .then(response => {
            console.log(response)
            if (!response.ok) {
                console.error('Ошибка сервера:', response.status);
                throw new Error('Сетевое соединение не установлено');
            }
            return response.json();
        })
        .then(data => {
            console.log('Успех:', data);
        })
        .catch((error) => {
            console.error('Ошибка:', error);
        });

        localStorage.setItem('showNotification', 'true');
        setTimeout(function() {
            location.reload();
        }, 100);
    }

    function fetchDistricts(regionId) {
        // Очистка списка хозяйств
        const distSelect = document.getElementById('district');
        distSelect.innerHTML = '<option value="" selected disable hidden></option>'; // сброс

        if (regionId) {
            // Отправка запроса на сервер
            fetch(`/api/districts`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Сеть не отвечает');
                    }
                    return response.json();
                })
                .then(data => {
                    // Добавление новых опций в селект
                    data.forEach(district => {
                        if (district.RegionId == regionId) { // Пример условия фильтрации
                            const option = document.createElement('option');
                            option.value = district.ID; // Используем ID фермы в качестве значения
                            option.textContent = district.Name; // Название фермы
                            distSelect.appendChild(option);
                        }
                    });
                     
                })
                .catch(error => {
                    console.error('Ошибка:', error);
                });
        }
    }
</script>
</html>
{{ end }}